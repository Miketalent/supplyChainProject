// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within

//const { assert } = require("console");

// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', (accounts) => {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
       
        let event = supplyChain.Harvested;
        // Watch the emitted event Harvested(
        await event((err, res) => {
            eventEmitted = true
        })
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from: originFarmerID});

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        var event = supplyChain.Processed;
        // Watch the emitted event Processed()
        await event( () => {
            eventEmitted = true;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1); //1 is Processed State
        assert.equal(eventEmitted, true); //event emitted
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: originFarmerID});

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        var event = supplyChain.Packed;
        // Watch the emitted event Packed()
        await event(()=>{eventEmitted = true;})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2); //2 is Packed State
        assert.equal(eventEmitted, true); //event emitted
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, 1, {from: originFarmerID});
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        var event = supplyChain.ForSale;
        // Watch the emitted event ForSale()
        await event(()=>{eventEmitted = true;});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 3); //3 is ForSale state
        assert.equal(resultBufferTwo[4], 1); //passed in 1 as product price  
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice});    
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold;
        await event(()=>{eventEmitted = true;});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID); //ownerId
        assert.equal(resultBufferTwo[6], distributorID) //distributorID
        assert.equal(resultBufferTwo[5], 4); //4 is Sold state   
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Sold by calling function shiptem()
        await supplyChain.shipItem(upc, {from: distributorID});    
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        var event = supplyChain.Shipped;
        // Watch the emitted event Shipped()
        await event(()=>{eventEmitted = true;});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5); //5 is Shipped State
        assert.equal(eventEmitted, true); //event emitted
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Sold by calling function receiveItem()
        await supplyChain.receiveItem(upc, {from: ownerID});
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Received()
        var event = supplyChain.Received;
        await event(()=>{eventEmitted = true;});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        // Verify the result set
        assert.equal(resultBufferOne[2], ownerID); //ownerId
        assert.equal(resultBufferTwo[5], 6); //6 is Received State
        assert.equal(eventEmitted, true); //event emitted
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Sold by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, {from: ownerID});
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased;
        await event(()=>{eventEmitted =  true;});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        // Verify the result set
        assert.equal(resultBufferOne[2], ownerID); //ownerId
        assert.equal(resultBufferTwo[5], 7); //7 is Purchased State
        assert.equal(eventEmitted, true); //event emitted
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku); //sku
        assert.equal(resultBufferOne[1], upc); //upc
        assert.equal(resultBufferOne[2], ownerID); //ownerID
        assert.equal(resultBufferOne[3], originFarmerID); //farmerID address
        assert.equal(resultBufferOne[4], originFarmName); //farm name
        assert.equal(resultBufferOne[5], originFarmInformation); //farm info
        assert.equal(resultBufferOne[6], originFarmLatitude); //farm lat
        assert.equal(resultBufferOne[7], originFarmLongitude); //farm long

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku); //sku
        assert.equal(resultBufferTwo[1], upc); //upc
        assert.equal(resultBufferTwo[2], productID); //productID
        assert.equal(resultBufferTwo[3], productNotes); //product notes
        assert.equal(resultBufferTwo[4], 1); //product price
        assert.equal(resultBufferTwo[5], 7); //last item state is purchased
        assert.equal(resultBufferTwo[6], distributorID); //distributor ID
        assert.equal(resultBufferTwo[7], ownerID); //retailer ID
        assert.equal(resultBufferTwo[8], ownerID); //consumer ID
    })

});

